using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class IslandGenerator : MonoBehaviour
{
    Renderer Rend;
    Color[] Col;
    Texture2D tex;
    public int size, leeway, scale;
    float[] perlin, fall;
    float[,] finalperlin;

    private void Start()
    {
        Rend = this.gameObject.GetComponent<Renderer>();
        Col = new Color[size * size];
        perlin = new float[size * size];
        fall = new float[size * size];
        finalperlin = new float[5, size * size];
        tex = new Texture2D(size, size);
        Rend.material.mainTexture = tex;
        GenerateFalloffMap();
        GeneratePerlinNoiseMap();
        Invoke("GenerateFullIsland", 1);
    }

    private void GenerateFalloffMap()
    {
        Vector2 Center = new Vector2(size / 2, size / 2);
        for (int x = 0; x < size; x++)
        {
            for (int y = 0; y < size; y++)
            {
                float sample = Vector2.Distance(new Vector2(x, y), Center) / leeway;
                fall[x * size + y] = sample;
            }
        }
    }

    void GeneratePerlinNoiseMap()
    {
        float xoff = UnityEngine.Random.Range(0, 10000);
        float yoff = UnityEngine.Random.Range(0, 10000);
        int o = 1;
        while(o < 5)
        {
            float x = 0.0f;
            while (x < size)
            {
                float y = 0.0f;
                while (y < size)
                {
                    float xCoord = xoff + x / size * scale * o;
                    float yCoord = yoff + y / size * scale * o; 
                    float sample = Mathf.PerlinNoise(xCoord, yCoord);
                    finalperlin[o, (int)x * size + (int)y] = sample;

                    y++;
                }
                x++;
            }
            o++;
        }
    }

    void GenerateFullIsland()
    {
        for (int o = 0; o < 5; o++)
        {
            for (int x = 0; x < size; x++)
            {
                for (int y = 0; y < size; y++)
                {
                    perlin[x * size + y] = finalperlin[0, x * size + y] + finalperlin[1, x * size + y] / 2 +
                        finalperlin[2, x * size + y] / 3 + finalperlin[3, x * size + y] / 4 + finalperlin[4, x * size + y] / 5;

                    float sample = perlin[x * size + y] - fall[x * size + y];
                    Col[x * size + y] = new Color(sample, sample, sample);

                }
            }
        }
        tex.SetPixels(Col);
        tex.Apply();
    }

}
